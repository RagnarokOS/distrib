#!/bin/ksh

# WORK IN PROGRESS. Not ready for use yet.

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#											#
#	Copyright (c) 2022-2023, Ian LeCorbeau <I-LeCorbeau (at) protonmail (dot) com>	#
#											#
#	Permission to use, copy, modify, and/or distribute this software for any	#
#	purpose with or without fee is hereby granted, provided that the above		#
#	copyright notice and this permission notice appear in all copies.		#
#											#
#	THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES	#
#	WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF		#
#	MERCHANTABILITY AND FITNESS IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR		#
#	ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES		#
#	WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN		#
#	ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF		#
#	OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.			#
#											#
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

DATE=$(date +"%Y%m%d")
REPODIR=$(pwd)
CONFIG="$REPODIR"/iso.conf

# Using the shlib from the iso's config directory to have a self-contained
# build process.
. config/includes.chroot_after_packages/lib/ragnarok-shlib

# Parsing global config options
_codename=$(getvar CODENAME "$CONFIG")
_distro=$(getvar DISTRO "$CONFIG")
_version=$(getvar VERSION "$CONFIG")
_flavour=$(getvar FLAVOUR "$CONFIG")
_mode=$(getvar ISOMODE "$CONFIG")
_publisher=$(getvar PUBLISHER "$CONFIG")
_pretty=$(getvar PRETTY_NAME "$CONFIG")
_imagename="$_distro"-"$_codename"-"$_mode"-"$DATE"

# TODO: this script is written in ksh (the OpenBSD version). In order to allow
# building the iso from any Debian system with only live-build and its deps
# present, a bash version should be created. This is not a priority, however.
# oksh is easily installable on Debian with either the custom Ragnarok package
# or from upstream at https://github.com/ibara/oksh

usage() {
	printf '%s\n' "
mkiso: script to build the Ragnarok iso.

This script needs to be run from the repo directory, and takes the
following options:

-b	build the iso
-c	clean the repo before or after build
-g	regenerate after modifying config file (see iso.conf)
-h	print help page
-s	sign the iso with signify(1), supplying private key location as arg 1
-u	update iso name (with build date) and syslinux's splash.svg

When multiple options are supplied, they need to be placed in the order in which
each stage is performed, e.g. './mkiso -g -b -s' to generate a new config, build
then sign the iso.

Always run './mkiso -c' before pushing to a repository.
"
}

# This script should never be run as root. However, lb build and lb clean require
# root privileges, so doas is called directly. If doas isn't installed, sudo will
# be called instead.
get_root() {
	if command -v /usr/bin/doas >/dev/null 2>&1; then
		/usr/bin/doas "$@"
	else
		echo "using sudo instead"
		/usr/bin/sudo "$@"
	fi
}

conf() {
	local _bootparams
	
	_bootparams=$(getvar BOOTPARAMS "$CONFIG")
	
	echo "Generating config..."
	lb config \
		-d "$_flavour" \
		--debian-installer none \
		--iso-publisher "$_publisher" \
		--initsystem sysvinit \
		--checksums sha512 \
		--image-name "$_imagename" \
		--hdd-label "$(echo $_distro | sed 's/.*/\U&/')"_"$(echo $_mode | sed 's/.*/\U&/')" \
		--iso-application "$_pretty" \
		--iso-volume "$_pretty"-"$_version" \
		--archive-areas "main contrib non-free" \
		--debootstrap-options "--variant=minbase" \
		--bootappend-live "$_bootparams"
}

# Generating splash.png for isolinux, based on splash.svg.in
gen_splash() {
	echo "generating splash"

	local _kernel
	
	_kernel=$(uname -r)

	cp config/bootloaders/syslinux_common/splash.svg.in config/bootloaders/syslinux_common/splash.svg

	sed -i	-e "s#@PRETTY@#$_pretty#g" \
		-e "s#@MODE@#$_mode#g" \
		-e "s#@PUBLISHER@#$_publisher#g" \
		-e "s#@DATE@#$DATE#g" \
		-e "s#@VERSION@#$_version#g" \
		-e "s#@CODENAME@#$_codename#g" \
		-e "s#@LINUX_VERSION@#$_kernel#g" \
		config/bootloaders/syslinux_common/splash.svg
}

build() {
	echo "building iso..."

	get_root lb build
}

# Custom packages are stored in config/packages.chroot, even if Ragnarok has a proper
# deb repository. This is a bit simpler, since A) it keeps the lb config command a bit
# shorter by avoiding using '--include=pkg1 pkgs2 ...' and B) it's known to work 100%
# of the time, as opposed to the standard method highlighted at:
# https://live-team.pages.debian.net/live-manual/html/live-manual/customizing-package-installation.en.html#distribution-mirrors-build-time
# which probably works properly, but has yet to be tested. It WILL be used down the road
# though.
#
# This function will remove all .deb packages from the directory and fetch them again
# from its source in order to ensure they're always up-to-date. See the iso.conf file
# on how to set the CPKG_SRC variable.
get_cpkgs() {
	cd config/packages.chroot && xargs apt-get download < config/packages.chroot/pkgs.list
}

# Not necessary now, since all custom packages are fetched from Ragnarok's already signed
# repo. Keeping here for now just in case.
verif_pkgs() {


	local _pubkey

	_pubkey="/etc/signify/ragnarok$_version.pub"
	
	cd "$REPODIR"/config/packages.chroot/ && \
		# If verification fails, the script should stop immediately.
		if ! signify -C -p "$_pubkey" -x SHA256.sig; then
			echo "Bad signature. Exiting..."
			exit 1
		else
			: # keep going
		fi
}

gen_sig() {
	local _seckey _pubkey
	
	# Full path to .sec and .pub Signify keys.
	# Never share the path to the .sec key.
	_seckey="$1"		# points to $SECKEY, which is this script's first and only argument.
	_pubkey="/etc/signify/ragnarok01.pub"

	# Sign the file
	/usr/bin/signify-openbsd -S -s "$_seckey" -m "$_imagename"-amd64.hybrid.iso -x "$_imagename"-amd64.hybrid.iso.sig

	# Verify for good measure
	/usr/bin/signify-openbsd -V -p "$_pubkey" -x "$_imagename"-amd64.hybrid.iso.sig -m "$_imagename"-amd64.hybrid.iso
}

# Cleaning up
do_clean() {
	# The bootloader config is regenerated at every build, so we clean up
	# the directory.
	echo "Removing splash.svg..."
	rm config/bootloaders/syslinux_common/splash.svg

	echo "Moving the iso and signature file outside the working directory..."
	mv "$_imagename"-amd64.hybrid.iso ../
	mv "$_imagename"-amd64.hybrid.iso.sig ../

	echo "Running lb clean..."
	get_root lb clean
}

# If the iso config ever has to be restarted from scratch
do_gen() {
	conf
	gen_splash
}

do_build() {
	gen_splash
	build
}

# Before rebuilding the iso
do_update() {
	lb config "$DATE"
	gen_splash
}

SECKEY=
while getopts bcghus: args; do
	case "$args" in
		b)	do_build ;;
		c)	do_clean ;;
		g)	do_gen ;;
		h)	usage ;;
		u)	do_update ;;
		s)	SECKEY="$OPTARG"
		       	gen_sig "$SECKEY" ;;
		*) usage ;;
	esac
done
shift $((OPTIND-1))
