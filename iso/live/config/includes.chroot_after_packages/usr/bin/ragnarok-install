#!/bin/ksh

# Main installer script.
# $Ragnarok: ragnarok-install,v 1.111 2024/09/14 18:36:58 lecorbeau Exp $

set -e

. /usr/lib/ragnarok-installer/funcs

CONF=${CONF:-install.conf}
TMP=$(mktemp -d -p /tmp ragnarok-install.XXXXXXXXXX)
# Parse config values
MIRROR="https://github.com/RagnarokOS/distrib/releases/download/"
VERSION="01"
URL="${MIRROR}${VERSION}"

# Never download stuff off the internet as the root user.
# I take no credit for this function. All credit goes to
# Antoine Jacoutot, who wrote OpenBSD's syspatch(1).
unpriv() {
	local _file=$2 _ret=0 _user=user

	if [[ $1 == -f && -n ${_file} ]]; then
		# shellcheck disable=SC2188
		>${_file}
		chown "${_user}" "${_file}"
		chmod 0711 "${TMP}"
		shift 2
	fi
	(($# >= 1))

	su -s /bin/sh ${_user} -c "$@" || _ret=$?

	[[ -n ${_file} ]] && chown root "${_file}"

	return ${_ret}
}

## Funcs to ask questions (these may end up being moved to
## lib/ragnarok-install/funcs down the line.

# Ask conf question and store _answer as a variable.
ask() {
	local _q=$1 _resp

	read -r _resp?"$_q "
	_answer="$_resp"
}

# For some questions, lists of available choices need to be provided.
# $1 is the question
# $2 is the list
ask_q() {
	local _resp _q=$1 _list=$2

	read -r _resp?"$_q "
	case "$_resp" in
		l)	less --prompt="/ to search, j/k to navigate, q to quit, h for help " .local/src/ragnarok/installer/usr/share/ragnarok-installer/lists/"$_list".list; ask_q "$@"
			;;
		*)	_answer="$_resp"
			;;
	esac
}

# Ask for password. We ask for the passwords and username here because
# we're not going to store passwords unencrypted in install.conf.
# Much like unpriv(), I take no credit for ask_pass/ask_password. All
# credits go to the creator(s) of the OpenBSD installer.
ask_pass() {
	stty -echo
	IFS= read -r _resp?"$1 "
	stty echo
	echo
}

ask_password() {
	local _q=$1 _resp

	while :; do
		ask_pass "$_q (will not echo)"
		_password=$_resp

		ask_pass "$_q (again)"
		[[ $_resp == "$_password" ]] && break

		echo "Passwords don't match, try again."
	done
}

# Now ask the questions
user_setup() {
	local _resp _Yn

	# If this is an auto install and the user setup temporary
	# passwords in install.conf, then use it instead.
	if [[ $_installtype == "auto" ]]; then
		if [[ -n $(get_val Rootpass "$CONF") ]]; then
			_rootpass=$(get_val Rootpass "$CONF")
		fi

		# Likewise for default user.
		if [[ -n $(get_val Username "$CONF") ]] && [[ -n $(get_val Userpass "$CONF") ]]; then
			_username=$(get_val Username "$CONF")
			_userpass=$(get_val Userpass "$CONF")
		fi

		return
	fi

	ask_password "Password for the root account?"
	_rootpass="$_password"

	read -r _Yn?"Setup a default user? [Y/n]: "
	case "$_Yn" in
		n|N)	return
			;;
		*)	ask "Name of the default user? "
			_username="$_answer"
			ask_password "Password for ${_username}"
			_userpass="$_password"
			;;
	esac
}

### Funcs to actually install the system.

# Partition the device
part_dev() {
	local _dev _mode _swap _root _home _homesize _bootparttype

	_dev=$(get_val Device "$CONF")
	_mode=$(get_val Bootmode "$CONF")
	_swap=$(get_val Swap "$CONF")
	_root=$(get_val Root "$CONF")
	_home=$(get_val Home "$CONF")

	# Wipe device
	sfdisk --delete "$_dev" || true

	# Set the proper part table (mbr for bios, GPT for EFI).
	case "$_mode" in
		bios)
			(echo o) | fdisk "$_dev"
			_bootparttype="L"
			;;
		efi)
			(echo g) | fdisk "$_dev"
			_bootparttype="U"
			;;
	esac

	# Home may be left empty to use the remaining space, so
	# handle it properly.
	if [[ -z $_home ]]; then
		_homsesize="+"
	else
		_homesize="${_home}"
	fi

	printf '%s\n' "start=2048, size=500M, type=$_bootparttype
	size=${_swap}, type=S
	size=${_root}, type=L
	size=${_homesize}, type=L" | sfdisk "${_dev}"

	# Set bootable flag on partition 1.
	case "$_mode" in
		bios)	sfdisk -A "$_dev" 1
			;;
		efi)	sfdisk --part-type "$_dev" 1 U
			;;
	esac
}

# Create filesystems and mount the device
mount_dev() {
	local _dev _mode

	_dev=$(get_val Device "$CONF")
	_mode=$(get_val Bootmode "$CONF")

	case "$_mode" in
		bios)
			mkfs.ext4 -F "${_dev}1"
			;;
		efi)
			mkfs.vfat -F 32 "${_dev}1"
			;;
	esac
	mkswap "${_dev}2"
	# mkfs will ask to proceed anyway unless -F is used.
	mkfs.ext4 -F "${_dev}3"
	mkfs.ext4 -F "${_dev}4"

	swapon "${_dev}2"
	mount -t ext4 -o errors=remount-ro "${_dev}3" /mnt
	mkdir -p /mnt/{boot,home}
	mount -t ext4 -o defaults "${_dev}4" /mnt/home
	case "$_mode" in
		bios)
			mount -t ext4 -o noexec,nosuid,nodev "${_dev}1" /mnt/boot
			;;
		efi)
			mkdir -p /mnt/boot/efi
			mount -t vfat -o umask=0077,noexec,nosuid,nodev "${_dev}1" /mnt/boot/efi
			;;
	esac
}

# Don't pollute console with stdout.
make_dev() {
	# If no boot part size is not present, then the user skipped partitioning.
	if [[ -z $(get_val Bootmode "$CONF") ]]; then
		_skipbootloader="yes"
	else
		part_dev > /dev/null
		mount_dev > /dev/null
	fi
}

# Download the tarball
get_tarball() {
	local _file="base${VERSION}.tgz"

	msg "Fetching ${_file}..."
	unpriv "wget -q --show-progress -O ${_file} ${URL}/${_file}"
}

# Extract base tarball.
extract() {
	msg "Extracting the base system..."
	tar xzpf "base${VERSION}.tgz" --xattrs --xattrs-include='*' --numeric-owner -C /mnt
}

# Copy install.conf to the chroot.
copy_conf() {
	cp "$CONF" /mnt/
}

# Set up fstab
gfstab() {
	msg "Generating fstab entries..."
	genfstab -U /mnt >> /mnt/etc/fstab
}

# Copy network files
set_net() {
	msg "Setting up network interfaces..."
	# Copy /etc/resolv.conf to the chroot, temporarily
	/usr/bin/cp /etc/resolv.conf /mnt/etc/resolv.conf

	# copy interfaces files.
	/usr/bin/mkdir -p /mnt/etc/network
	/usr/bin/cp /etc/network/interfaces /mnt/etc/network/

	# Copy /etc/network/interfaces.d/ if there's anything in it.
	if [[ -z $(find /mnt/etc/network/interfaces.d/ -prune -empty 2>/dev/null) ]]; then
		/usr/bin/cp -r /etc/network/interfaces.d/ /mnt/etc/network/
	fi
}

# Setup /etc/hosts and /etc/hostname
set_hosts() {
	local _hostname

	_hostname=$(get_val Hostname "$CONF")

	msg "Setting up hostname and hosts file..."
	sed -i "s/ragnarok/$_hostname/g" /mnt/etc/hostname
	sed -i "2i 127.0.1.1\t${_hostname}" /mnt/etc/hosts
}

# Refresh the repository
refresh_repo() {
	msg "Updating repo..."
	arch-chroot /mnt apt-get update
	arch-chroot /mnt apt-get upgrade -y
}

# Set the timezone
set_tz() {
	local _tz _area _zone

	_tz=$(get_val Timezone "$CONF")
	_area=${_tz%%/*}
	_zone=${_tz##*/}

	msg "Setting the timezone..."
	echo "tzdata tzdata/Areas select $_area" \
		| arch-chroot /mnt debconf-set-selections
	echo "tzdata tzdata/Zones/$_area select $_zone" \
		| arch-chroot /mnt debconf-set-selections
	echo 'tzdata tzdata/Zones/Etc select UTC' \
	       | arch-chroot /mnt debconf-set-selections
	# This has to be done or else dpkg-reconfigure insists on using Etc
	# as the default timezone for whatever stupid reason.
	echo "${_area}/${_zone}" > /mnt/etc/timezone
	arch-chroot /mnt ln -sf /usr/share/zoneinfo/"${_area}"/"${_zone}" /etc/localtime
	arch-chroot /mnt dpkg-reconfigure -f noninteractive tzdata
}

# Set locales
set_locale() {
	local _locale _charset

	_locale=$(get_val Locale "$CONF")
	_charset=$(awk '/Locale/ { print $4 }' "$CONF")

	msg "Setting up locales..."
	echo "locales locales/default_environment_locale select $_locale" \
		| arch-chroot /mnt debconf-set-selections
	echo "locales locales/locales_to_be_generated multiselect $_locale $_charset" \
		| arch-chroot /mnt debconf-set-selections
	arch-chroot /mnt apt-get install locales -y
}

# Setup the console
set_cons() {
	local  _locale _charset

	_locale=$(get_val Locale "$CONF")
	_charset=$(awk '/Locale/ { print $4 }' "$CONF")

	msg "Setting up the console..."

	# Using the setcons script for that in order to keep the installer
	# as small as humanly possible.
	setcons "$_locale" "$_charset"

	arch-chroot /mnt /bin/ksh -c "DEBIAN_FRONTEND=noninteractive apt-get install console-setup -y"

	# Set the console font to spleen if the codeset is 'Lat15'
	if grep -q "xfonts" "$CONF"; then
		case "$CODESET" in
			Lat15)
				sed -i 's/FONTFACE/#&/' /mnt/etc/default/console-setup
				sed -i 's/FONTSIZE/#&/' /mnt/etc/default/console-setup
				printf '%s\n' 'FONT="spleen-8x16.psfu.gz"' >> /mnt/etc/default/console-setup
				;;
		esac
	fi
}

# Set keymap
set_kb() {
	local _keymap _variant

	_keymap=$(get_val KB_Layout "$CONF")
	_variant=$(get_val KB_Variant "$CONF")

	msg "Setting up the keyboard..."
	echo "keyboard-configuration keyboard-configuration/model select Generic 105-key PC" \
		| arch-chroot /mnt debconf-set-selections
	echo "keyboard-configuration keyboard-configuration/layoutcode string $_keymap" \
		| arch-chroot /mnt debconf-set-selections
	echo "keyboard-configuration keyboard-configuration/variant select $_variant" \
		| arch-chroot /mnt debconf-set-selections
	echo "keyboard-configuration keyboard-configuration/xkb-keymap select $_keymap" \
		| arch-chroot /mnt debconf-set-selections
	echo "keyboard-configuration keyboard-configuration/store_defaults_in_debconf_db boolean true" \
		| arch-chroot /mnt debconf-set-selections

	printf '%s\n' "XKBMODEL=\"pc105\"
XKBLAYOUT=\"$_keymap\"
XKBVARIANT=\"\"
XKBOPTIONS=\"\"

BACKSPACE=\"guess\""> /mnt/etc/default/keyboard
	arch-chroot /mnt dpkg-reconfigure -f noninteractive keyboard-configuration
}

set_rootpass() {
	msg "Setting up root..."

	echo "root:$_rootpass" | arch-chroot /mnt chpasswd
	unset _rootpass
}

set_user() {
	if [[ -n ${_username+x} ]]; then
		msg "Setting up ${_username}..."
		arch-chroot /mnt useradd -m -s /bin/ksh "$_username"
		arch-chroot /mnt usermod -aG wheel,cdrom,floppy,audio,dip,video,plugdev,netdev "$_username"
		echo "${_username}:${_userpass}" | arch-chroot /mnt chpasswd
		unset _userpass
	fi
}

# Install the kernels
inst_kern() {
	# First, install Debian's standard kernel as a back up.
	msg "Installing the kernel..."
	arch-chroot /mnt/ apt-get install linux-image-amd64 -y
	arch-chroot /mnt/ kernupd -d
	arch-chroot /mnt kernupd -i
}

# Wrapper function around apt-get. The virt set needs to be installed
# without recommends, so this is how it'll be handled.
installcmd() {
	local _set=$1

	case "$1" in
		ragnarok-virt)
			apt-get install --no-install-recommends -y "$_set"
			;;
		*)
			apt-get install -y "$_set"
			;;
	esac
}

# Install the sets.
install_sets() {
	local _sets 

	set -A _sets -- $(sed -n 's/Sets = //p' install.conf)

	msg "Installing the sets..."
	if [[ ${_sets[*]} == none ]] || [[ ${#_sets[@]} -eq 0 ]]; then
		msg "No sets selected, skipping..."
	else
		for _set in "${_sets[@]}"; do
			installcmd "ragnarok-${_set}"
		done
	fi

}

# Setup the bootloader. Grub for EFI, extlinux for bios/legacy.
set_bootloader() {
	local _resp _dev _bootdev

	_dev=$(get_val Device "$CONF")

	# Skip this if the user created custom partitions. They'll need
	# to install the bootloader on their own.
	if [[ $_skipbootloader == "no" ]]; then
		msg "Installing the grub bootloader..."
		if [ -d /mnt/boot/efi ]; then
			# Install grub-efi
			arch-chroot /mnt/ apt-get install grub-efi-amd64 -y
			arch-chroot /mnt/ grub-install --target=x86_64-efi \
				--efi-directory=/boot/efi
			arch-chroot /mnt update-grub
		else
			# Install/Configure extlinux
			arch-chroot /mnt/ apt-get install extlinux -y
			msg "Listing available devices..."
			mkdir -p /mnt/boot/syslinux
			cp /mnt/usr/share/ragnarok/syslinux/syslinux.cfg /mnt/boot/syslinux/
			cp /mnt/usr/share/ragnarok/syslinux/syslinux-install /mnt/usr/bin/
			cp /mnt/usr/share/ragnarok/syslinux/zz-update-syslinux /mnt/etc/kernel/postinst.d/
			chmod 755 /mnt/etc/kernel/postinst.d/zz-update-syslinux
			chmod 755 /mnt/usr/bin/syslinux-install
			arch-chroot /mnt /bin/ksh /usr/bin/syslinux-install "${_dev}"
		fi
	fi
}

# Don't run user_setup and mkconf if '-a' is given as arg.
# Clean up: remove /etc/resolv.conf and, if it exists, machine-id.
cleanup() {
	msg "Cleaning up..."
	rm /mnt/etc/resolv.conf
	for _file in /etc/machine-id /var/lib/dbus/machine-id; do
		if [[ -f /mnt/$_file ]]; then
			rm /mnt/"${_file}"
		fi
	done
	rm -r "${TMP}"
}

# Unmount devices
unmount_dev() {
	local _dev

	_dev=$(get_val Device "$CONF")

	umount "${_dev}1"
	umount "${_dev}4"
	umount "${_dev}3"
}

# Cleanup and unmount device then reboot
do_reboot() {
	cleanup
	unmount_dev
	loginctl reboot
}

# Finishing touch
finish() {
	local _resp

	read -r _resp?"Installation complete. Type r (to reboot) or e (to exit and stay in the live session) then Return. "

	case "$_resp" in
		r)	do_reboot
			;;
		e)	exit 0
			;;
		*)	do_reboot
			;;
	esac
}

trap 'cleanup' EXIT
trap exit HUP INT TERM

_installtype="interactive"
_skipbootloader="no"

# Will use getopts because there's no doubt more opts
# will come (such as verbosity level).
while getopts ":a" _opt; do
	case "$_opt" in
		a) _installtype="auto" ;;
	esac
done

# Don't run user_setup and mkconf if '-a' is given as arg.
run_conf() {
	if [[ $_installtype == "interactive" ]]; then
		mkconf
	fi
}

main() {
	run_conf
	user_setup
	make_dev
	get_tarball
	extract
	copy_conf
	gfstab
	set_net
	set_hosts
	refresh_repo
	set_locale
	set_tz
	set_cons
	set_kb
	set_rootpass
	set_user
	inst_kern
	install_sets
	set_bootloader
	finish
}

main
finish
